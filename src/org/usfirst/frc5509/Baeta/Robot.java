// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5509.Baeta;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5509.Baeta.commands.*;
import org.usfirst.frc5509.Baeta.subsystems.*;



/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
    Command autonomousCommand;
    Command wenchUp;
    Command wenchDown;
    Command wenchStop;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive;
    public static Weainch weainch;
    public static Ball_Mech ball_Mech;
    public static GyroSubsystem gyro1;
	public static Encoder Encode;
	public static Pneumatics pneumatics;
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        ball_Mech = new Ball_Mech();
        weainch = new Weainch();

        wenchUp = new WenchUp();
        wenchDown = new WenchDown();
        wenchStop = new WenchStop();
        
        pneumatics = new Pneumatics();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        Weainch.moveWenUp();
        try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        Weainch.stopWench();
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        //Values
        double y = oi.joystick1.getRawAxis(1);
        double x = oi.joystick1.getRawAxis(4);
        double ball_launchin = oi.joystick1.getRawAxis(2);
        double ball_launchout = oi.joystick1.getRawAxis(3);
        
        
        
        //Drive Robot
        drive.DriveRobot(x, y);
        
        //Ball_Mech
        
        if(ball_launchout == 0)
        {
        	ball_Mech.Ball_launcherin(ball_launchin);
        }
        else if(ball_launchin == 0)
        {
        	ball_Mech.Ball_launcherout(ball_launchout);
        }
        
        //wench
        SmartDashboard.putNumber("Reading before wench", 1);
        oi.joystickButton1.whileHeld(wenchUp);
        oi.joystickButton2.whileHeld(wenchDown);
        oi.joystickButton4.whenPressed(wenchStop);
        
    
        //SmartDashBoard Stuff
        //SmartDashboard.putNumber("Gyro Reading", gyro1.getValue());
		//SmartDashboard.putNumber("Encoder value", Encode.get());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
