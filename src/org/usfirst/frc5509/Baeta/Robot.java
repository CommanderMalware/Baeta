// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5509.Baeta;

import org.usfirst.frc5509.Baeta.commands.AutonomousCommand;
import org.usfirst.frc5509.Baeta.commands.WheelieBarIn;
import org.usfirst.frc5509.Baeta.commands.WheelieBarOut;
import org.usfirst.frc5509.Baeta.commands.BallPokeIn;
import org.usfirst.frc5509.Baeta.commands.BallPokeOut;
import org.usfirst.frc5509.Baeta.commands.WenchDown;
import org.usfirst.frc5509.Baeta.commands.WenchStop;
import org.usfirst.frc5509.Baeta.commands.WenchUp;
import org.usfirst.frc5509.Baeta.subsystems.BallBox;
import org.usfirst.frc5509.Baeta.subsystems.Ball_Mech;
import org.usfirst.frc5509.Baeta.subsystems.Drive;
import org.usfirst.frc5509.Baeta.subsystems.GyroSubsystem;
import org.usfirst.frc5509.Baeta.subsystems.Weainch;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	Command wenchUp;
	Command wenchDown;
	Command wenchStop;
	Command wheelieBarIn;
	Command wheelieBarOut;
	Command ballPokeIn;
	Command ballPokeOut;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Drive drive;
	public static Weainch weainch;
	public static Ball_Mech ball_Mech;
	public static GyroSubsystem gyro1;
	public static Encoder Encode;
	public static DoubleSolenoid pneumatic;
	public static DoubleSolenoid pneumatic2;
	public static BallBox ballBox;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		drive = new Drive();
		ball_Mech = new Ball_Mech();
		weainch = new Weainch();
		ballBox = new BallBox();

		wenchUp = new WenchUp();
		wenchDown = new WenchDown();
		wenchStop = new WenchStop();
		wheelieBarIn = new WheelieBarIn();
		wheelieBarOut = new WheelieBarOut();
		ballPokeIn = new BallPokeIn();
		ballPokeOut = new BallPokeOut();

		Compressor c = new Compressor(0);
		c.start();

		c.setClosedLoopControl(true);
		pneumatic = new DoubleSolenoid(0, 1);
		pneumatic.set(DoubleSolenoid.Value.kReverse);

		pneumatic2 = new DoubleSolenoid(2, 3);
		pneumatic2.set(DoubleSolenoid.Value.kReverse);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		autonomousCommand = new AutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();

		// Go Forward

		// Cross Defense??

		// Shoot Ball?????

	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();

		// Values

		// JOYSTICK 1
		double y = oi.joystick1.getRawAxis(1);
		double x = oi.joystick1.getRawAxis(4);
		oi.joystickButton5.whenPressed(wheelieBarOut);
		oi.joystickButton6.whenPressed(wheelieBarIn);

		// JOYSTICK 2 LAUNCH
		double ball_launchin = oi.joystick2.getRawAxis(2);
		double ball_launchout = oi.joystick2.getRawAxis(3);
		// ADD POKE TO LAUNCH
		// oi.joystickButton5.whenPressed(ballPokeIn);
		// oi.joystickButton6.whenPressed(ballPokeOut);
		double g = oi.joystick2.getRawAxis(1);
		double e = oi.joystick2.getRawAxis(5);
		ballBox.MoveBallBox(g);
		weainch.MoveWench(e);

		// Drive Robot
		drive.DriveRobot(x, y);

		// Ball_Mech

		if (ball_launchout == 0) {
			ball_Mech.Ball_launcherin(ball_launchin);
			
			try {
				Thread.sleep(800);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			if(Robot.pneumatic.equals(DoubleSolenoid.Value.kForward)){
				
			} else {Robot.pneumatic.set(DoubleSolenoid.Value.kForward);}
			
		} else if (ball_launchin == 0) {
			ball_Mech.Ball_launcherout(ball_launchout);
			
			try {
				Thread.sleep(800);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			if(Robot.pneumatic.equals(DoubleSolenoid.Value.kReverse)){
				
			} else {Robot.pneumatic.set(DoubleSolenoid.Value.kReverse);}
		}

		// wench
		SmartDashboard.putNumber("Reading before wench", 1);
		oi.joystickButton1.whileHeld(wenchUp);
		oi.joystickButton2.whileHeld(wenchDown);
		oi.joystickButton4.whenPressed(wenchStop);

		// SmartDashBoard Stuff
		// SmartDashboard.putNumber("Gyro Reading", gyro1.getValue());
		// SmartDashboard.putNumber("Encoder value", Encode.get());

	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
